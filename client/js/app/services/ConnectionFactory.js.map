{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AACXC,gB,GAAa,I;AACbC,W,GAAQ,I;;mCAECC,iB;AAEX,qCAAc;AAAA;;AAEZ,gBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;;;0CAEsB;;AAErB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,0BAAYI,eAAZ,GAA8B,aAAK;;AAEjCT,kCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,eAHD;;AAKAR,0BAAYS,SAAZ,GAAwB,aAAK;;AAE3B,oBAAI,CAAChB,UAAL,EAAiB;;AAEfA,+BAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,0BAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,6BAAWC,KAAX,GAAmB,YAAW;AAC5B,0BAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACD,mBAFD;AAGD;;AAEDE,wBAAQL,UAAR;AACD,eAZD;;AAcAO,0BAAYW,OAAZ,GAAsB,aAAK;;AAEzBC,wBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,uBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eALD;AAOD,aA9BM,CAAP;AA+BD;;;wCAEoBtB,U,EAAY;;AAE/BH,mBAAO0B,OAAP,CAAe,iBAAS;;AAEtB,kBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEjD1B,yBAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD,aALD;AAMD;;;4CAEwB;;AAEvB,gBAAG7B,UAAH,EAAe;AACbC;AACAD,2BAAa,IAAb;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 1;\r\nconst dbName = 'aluraframe';\r\nvar connection = null;\r\nvar close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n  constructor() {\r\n\r\n    throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n  }\r\n\r\n  static getConnection() {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n      openRequest.onupgradeneeded = e => {\r\n\r\n        ConnectionFactory._createStores(e.target.result);\r\n      };\r\n\r\n      openRequest.onsuccess = e => {\r\n\r\n        if (!connection) {\r\n          \r\n          connection = e.target.result;\r\n          close = connection.close.bind(connection);\r\n          connection.close = function() {\r\n            throw new Error('Você não pode fechar diretamente a conexão');\r\n          }\r\n        }\r\n\r\n        resolve(connection);\r\n      };\r\n\r\n      openRequest.onerror = e => {\r\n\r\n        console.log(e.target.error);\r\n\r\n        reject(e.target.error.name);\r\n      };\r\n\r\n    });\r\n  }\r\n\r\n  static _createStores(connection) {\r\n    \r\n    stores.forEach(store => {\r\n\r\n      if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n\r\n      connection.createObjectStore(store, { autoIncrement: true });\r\n    });\r\n  }\r\n\r\n  static closeConnection() {\r\n\r\n    if(connection) {\r\n      close();\r\n      connection = null;\r\n    }\r\n  }\r\n\r\n}"]}